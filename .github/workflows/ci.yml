name: âš™ Build And Release
on:
  push:
    branches:
    - master

jobs:

  build-win:
    name: âš™ Build - Windows
    runs-on: windows-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2


    - name: CMake Win64
      uses: lukka/run-cmake@v3
      with:
        buildDirectory: '${{ github.workspace }}/win64'
        buildWithCMakeArgs: --config Release
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeGenerator: VS16Win64 
        cmakeBuildType: Release   
        cmakeAppendedArgs: '-DCRABNET_ENABLE_STATIC=OFF'


    - name: CMake Win32
      uses: lukka/run-cmake@v3
      with:
        buildDirectory: '${{ github.workspace }}/win32'
        buildWithCMakeArgs: --config Release
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeGenerator: VS16Win32 
        cmakeBuildType: Release   
        cmakeAppendedArgs: '-DCRABNET_ENABLE_STATIC=OFF'


    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: windows-release
        path: |
          ${{ github.workspace }}\win64\lib\Release\RakNet.dll
          ${{ github.workspace }}\win32\lib\Release\RakNet.dll


  build-linux:
    name: âš™ Build - Linux
    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2


    - name: CMake Linux 64-bit
      uses: lukka/run-cmake@v3
      with:
        buildDirectory: '${{ github.workspace }}/linux64'
        buildWithCMakeArgs: --config Release
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeBuildType: Release
        cmakeAppendedArgs: '-DCRABNET_ENABLE_STATIC=OFF -DCMAKE_C_FLAGS=-m64 -DCMAKE_CXX_FLAGS=-m64'


    #- name: CMake Linux 32-bit
    #  uses: lukka/run-cmake@v3
    #  with:
    #    buildDirectory: '${{ github.workspace }}/linux32'
    #    buildWithCMakeArgs: --config Release
    #    cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
    #    cmakeBuildType: Release
    #    cmakeAppendedArgs: '-DCRABNET_ENABLE_STATIC=OFF -DCMAKE_C_FLAGS=-m32 -DCMAKE_CXX_FLAGS=-m32 -DCMAKE_C_COMPILER_WORKS=1 -DCMAKE_CXX_COMPILER_WORKS=1'


    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: linux-release
        path: |
          ${{ github.workspace }}/linux64/lib/libRakNet.so
          ${{ github.workspace }}/linux32/lib/libRakNet.so


  build-android:
    name: âš™ Build - Android
    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2


    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r23
        add-to-path: false


    - name: CMake Android arm64-v8a (Oculus Quest)
      uses: lukka/run-cmake@v3
      with:
        buildDirectory: '${{ github.workspace }}/android-arm64-v8a'
        buildWithCMakeArgs: --config Release
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeBuildType: Release   
        cmakeAppendedArgs: '-DCRABNET_ENABLE_STATIC=OFF -DCMAKE_TOOLCHAIN_FILE=${{ steps.setup-ndk.outputs.ndk-path }}/build/cmake/android.toolchain.cmake -DANDROID_ABI=arm64-v8a -DANDROID_PLATFORM=23'


    - name: CMake Android armeabi-v7a
      uses: lukka/run-cmake@v3
      with:
        buildDirectory: '${{ github.workspace }}/android-armeabi-v7a'
        buildWithCMakeArgs: --config Release
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeBuildType: Release   
        cmakeAppendedArgs: '-DCRABNET_ENABLE_STATIC=OFF -DCMAKE_TOOLCHAIN_FILE=${{ steps.setup-ndk.outputs.ndk-path }}/build/cmake/android.toolchain.cmake -DANDROID_ABI=armeabi-v7a -DANDROID_PLATFORM=23'


    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: android-release
        path: |
          ${{ github.workspace }}/android-arm64-v8a/lib/libRakNet.so
          ${{ github.workspace }}/android-armeabi-v7a/lib/libRakNet.so


  release:
    needs: [build-win, build-linux, build-android]

    name: ðŸš€ Release
    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Download Artifacts
      uses: actions/download-artifact@v2

    - name: Prepare Artifacts
      run: |
        paths=(
        '${{ github.workspace }}/windows-release/win64/lib/Release/RakNet.dll'
        '${{ github.workspace }}/windows-release/win32/lib/Release/RakNet.dll'
        '${{ github.workspace }}/linux-release/linux64/lib/libRakNet.so'
        '${{ github.workspace }}/linux-release/linux32/lib/libRakNet.so'
        '${{ github.workspace }}/android-release/android-arm64-v8a/lib/libRakNet.so'
        '${{ github.workspace }}/android-release/android-armeabi-v7a/lib/libRakNet.so'
        )

        names=(
        '${{ github.workspace }}/RakNet.x64.dll'
        '${{ github.workspace }}/RakNet.x86.dll'
        '${{ github.workspace }}/libRakNet.x64.so'
        '${{ github.workspace }}/libRakNet.x86.so'
        '${{ github.workspace }}/libRakNet.arm64.so'
        '${{ github.workspace }}/libRakNet.arm.so'
        )

        for (( i = 0; i < ${#paths[@]}; ++i )); do
          if [ -f "${paths[i]}" ]; then
            mv ${paths[i]} ${names[i]}
          fi
        done

    - name: Release
      uses: cycjimmy/semantic-release-action@v2
      with:
        extra_plugins: |
          @semantic-release/changelog
          @semantic-release/git
        branch: master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 