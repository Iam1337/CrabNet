name: ⚙ Build And Release
on:
  push:
    branches:
    - master

jobs:
  build-win:
    name: ⚙ Build And Release
    runs-on: windows-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: 'recursive'


    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r23
        add-to-path: false


    - name: CMake Android arm64-v8a (Oculus Quest)
      uses: lukka/run-cmake@v3
      with:
        buildDirectory: '${{ runner.workspace }}/android-arm64-v8a'
        buildWithCMakeArgs: --config Release
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeBuildType: Release   
        cmakeAppendedArgs: '-G Ninja -DCRABNET_ENABLE_STATIC=OFF -DCMAKE_TOOLCHAIN_FILE=${{ steps.setup-ndk.outputs.ndk-path }}/build/cmake/android.toolchain.cmake -DANDROID_ABI=arm64-v8a -DANDROID_PLATFORM=23'


    # Required NDK r20b, not supported by Oculus Quest
    #- name: CMake Android armeabi-v7a
    #  uses: lukka/run-cmake@v3
    #  with:
    #    buildDirectory: '${{ runner.workspace }}/android-armeabi-v7a'
    #    buildWithCMakeArgs: --config Release
    #    cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
    #    cmakeGenerator: Ninja 
    #    cmakeBuildType: Release   
    #    cmakeAppendedArgs: '-DCRABNET_ENABLE_STATIC=OFF -DCMAKE_TOOLCHAIN_FILE=${{ steps.setup-ndk.outputs.ndk-path }}/build/cmake/android.toolchain.cmake -DANDROID_ABI=armeabi-v7a -DANDROID_PLATFORM=23'


    - name: CMake Win64
      uses: lukka/run-cmake@v3
      with:
        buildDirectory: '${{ runner.workspace }}/win64'
        buildWithCMakeArgs: --config Release
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeGenerator: VS16Win64 
        cmakeBuildType: Release   
        cmakeAppendedArgs: '-DCRABNET_ENABLE_STATIC=OFF'


    # Not required
    #- name: CMake Win32
    #  uses: lukka/run-cmake@v3
    #  with:
    #    buildDirectory: '${{ runner.workspace }}/win32'
    #    buildWithCMakeArgs: --config Release
    #    cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
    #    cmakeGenerator: VS16Win32 
    #    cmakeBuildType: Release   
    #    cmakeAppendedArgs: '-DCRABNET_ENABLE_STATIC=OFF'

    - name: Build Archive
      run: |
        $archiveDirectory = "${{ runner.workspace }}\prebuild\"
        $archive = "${{ runner.workspace }}\prebuild.zip"

        if (-not(Test-Path -Path $archiveDirectory))
        {
            $null = New-Item -ItemType Directory -Path $archiveDirectory
        }

        $array = @(
            @{Path='${{ runner.workspace }}\win32\lib\Release\RakNet.dll';Name='RakNet.win32.dll'}
            @{Path='${{ runner.workspace }}\win64\lib\Release\RakNet.dll';Name='RakNet.win64.dll'}
            @{Path='${{ runner.workspace }}\android-armeabi-v7a\lib\libRakNet.so';Name='libRakNet.android-armeabi-v7a.so'}
            @{Path='${{ runner.workspace }}\android-arm64-v8a\lib\libRakNet.so';Name='libRakNet.android-arm64-v8a.so'}
        )

        Foreach ($item in $array) 
        {
            if (Test-Path -Path $item.Path -PathType Leaf) 
            {
                $destination = -join($archiveDirectory, $item.Name)

                Move-Item -Path $item.Path -Destination $destination
            } 
        }

        $mask = -join($archiveDirectory, "*") 
        Compress-Archive -Path $mask -CompressionLevel "Fastest" -DestinationPath $archive


    - name: Release
      uses: cycjimmy/semantic-release-action@v2
      with:
        extra_plugins: |
          @semantic-release/changelog
          @semantic-release/git
        branch: master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 